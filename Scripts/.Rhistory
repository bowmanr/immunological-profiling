dir(datadir)
# lists all files in datadir
targets <- readTargets("phenoData.txt",path=datadir,sep="",row.names="filename")
# sets the variable "targets" to be a dataframe of the microarray data in phenoData.txt
targets
# shows variable "targets", matches UserGuide
ab <- ReadAffy(filenames=targets$filename, celfile.path=datadir)
# Creates variable "ab" as an AffyBatch with all .CEL files from datadir (There are actual .CEL files this time!)
eset <- rma(ab)
# converts AffyBatch data to expression set, normalizes data
ID <- featureNames(eset)
# Sets ID to be the names stored in eset
#################################################
Symbol <- getSYMBOL(ID,"hgu95av2.db")
# Sets Symbol to map the identifiers from the eset to hgu95av2.db
fData(eset) <- data.frame(Symbol=Symbol)
#Accesses the data in Symbol
#DOESN'T WORK: hgu95av2.db will not load because AnnotationDbi is outdated
################################################
treatments <- factor(c(1,1,2,2,3,3,4,4),labels=c("e10","E10","e48","E48"))
# Gathers data from eset, labels based on time. Will print the vector for data and the 4 levels present - e10 E10 e48 E48
contrasts(treatments) <- cbind(Time=c(0,0,1,1),E10=c(0,1,0,0),E48=c(0,0,0,1))
# Sets, contrasts for the factor, "treatments". E10 and E48 show FC in the Time
design <- model.matrix(~treatments)
# Sets design to be a matrix based on the factor "treatments"
fit <- lmFit(eset,design)
# creates linear model of matrix "design" based on exression set "eset"
cont.matrix <- cbind(E10=c(0,0,1,0),E48=c(0,0,0,1))
# isolates the estrogen effects
fit2 <- contrasts.fit(fit, cont.matrix)
# fills linear model "fit" with standard errors for contrast matrix
fit2 <- eBayes(fit2)
results <- decideTests(fit2, method="global")
#classifies statistics in fit2 using global method which controls false discovery rate
results <- decideTests(fit2, method="nestedF")
#adjusts F-test p-values
i <- grep("AFFX",ID)
#finds pattern matches, but what is AFFX???
summary(fit2$F.p.value[i])
#Provides summary of data found in F.p.value based on pattern-recognition
results <- classifyTestsF(fit2, p.value=0.0001)
#Tests each gene across the contrasts, with a cutoff p.value
summary(results)
table(E10=results[,1],E48=results[,2])
#Creates a table with E10 being the first column of results and E48 being the second
vennDiagram(results,include="up")
#Creates venn diagram showing up-regulated genes, matches UserGuide
vennDiagram(results,include="down")
#Creates venn diagram showing down-regulated genes, matches UserGuide
quartz()
vennDiagram(results,include="up")
#Creates venn diagram showing up-regulated genes, matches UserGuide
vennDiagram(results,include="down")
#Creates venn diagram showing down-regulated genes, matches UserGuide
vennDiagram(results,include="up")
vennDiagram(results,include="up")
vennDiagram(results,include="down")
vennDiagram(results,include="up")
vennDiagram(results,include="up")
vennDiagram(results,include="down")
### Installed "hgu95av2cdf" package using biocLite function
### Installed "hgu95av2.db" package using biocLite function
### Installed "estrogen" package using biocLite function
library(limma)
library(affy)
library(annotate)
library(hgu95av2.db)
#Error: package ‘AnnotationDbi’ 1.22.6 is loaded, but >= 1.23.24 is required by ‘hgu95av2.db’
library(hgu95av2cdf)
# Warning message: package ‘hgu95av2cdf’ was built under R version 3.0.2
datadir <- file.path(find.package("estrogen"),"extdata")
# finds the data from estrogen package
dir(datadir)
# lists all files in datadir
targets <- readTargets("phenoData.txt",path=datadir,sep="",row.names="filename")
# sets the variable "targets" to be a dataframe of the microarray data in phenoData.txt
targets
# shows variable "targets", matches UserGuide
ab <- ReadAffy(filenames=targets$filename, celfile.path=datadir)
# Creates variable "ab" as an AffyBatch with all .CEL files from datadir (There are actual .CEL files this time!)
eset <- rma(ab)
# converts AffyBatch data to expression set, normalizes data
ID <- featureNames(eset)
# Sets ID to be the names stored in eset
#################################################
Symbol <- getSYMBOL(ID,"hgu95av2.db")
# Sets Symbol to map the identifiers from the eset to hgu95av2.db
fData(eset) <- data.frame(Symbol=Symbol)
#Accesses the data in Symbol
#DOESN'T WORK: hgu95av2.db will not load because AnnotationDbi is outdated
################################################
treatments <- factor(c(1,1,2,2,3,3,4,4),labels=c("e10","E10","e48","E48"))
# Gathers data from eset, labels based on time. Will print the vector for data and the 4 levels present - e10 E10 e48 E48
contrasts(treatments) <- cbind(Time=c(0,0,1,1),E10=c(0,1,0,0),E48=c(0,0,0,1))
# Sets, contrasts for the factor, "treatments". E10 and E48 show FC in the Time
design <- model.matrix(~treatments)
# Sets design to be a matrix based on the factor "treatments"
fit <- lmFit(eset,design)
# creates linear model of matrix "design" based on exression set "eset"
cont.matrix <- cbind(E10=c(0,0,1,0),E48=c(0,0,0,1))
# isolates the estrogen effects
fit2 <- contrasts.fit(fit, cont.matrix)
# fills linear model "fit" with standard errors for contrast matrix
fit2 <- eBayes(fit2)
results <- decideTests(fit2, method="global")
#classifies statistics in fit2 using global method which controls false discovery rate
results <- decideTests(fit2, method="nestedF")
#adjusts F-test p-values
i <- grep("AFFX",ID)
#finds pattern matches, but what is AFFX???
summary(fit2$F.p.value[i])
#Provides summary of data found in F.p.value based on pattern-recognition
results <- classifyTestsF(fit2, p.value=0.0001)
#Tests each gene across the contrasts, with a cutoff p.value
summary(results)
table(E10=results[,1],E48=results[,2])
#Creates a table with E10 being the first column of results and E48 being the second
vennDiagram(results,include="up")
#Creates venn diagram showing up-regulated genes, matches UserGuide
vennDiagram(results,include="down")
#Creates venn diagram showing down-regulated genes, matches UserGuide
?AFFX
?grep
ID
### Installed "hgu95av2cdf" package using biocLite function
### Installed "hgu95av2.db" package using biocLite function
### Installed "estrogen" package using biocLite function
library(limma)
library(affy)
library(annotate)
library(hgu95av2.db)
#Error: package ‘AnnotationDbi’ 1.22.6 is loaded, but >= 1.23.24 is required by ‘hgu95av2.db’
library(hgu95av2cdf)
# Warning message: package ‘hgu95av2cdf’ was built under R version 3.0.2
datadir <- file.path(find.package("estrogen"),"extdata")
# finds the data from estrogen package
dir(datadir)
# lists all files in datadir
targets <- readTargets("phenoData.txt",path=datadir,sep="",row.names="filename")
# sets the variable "targets" to be a dataframe of the microarray data in phenoData.txt
targets
# shows variable "targets", matches UserGuide
ab <- ReadAffy(filenames=targets$filename, celfile.path=datadir)
# Creates variable "ab" as an AffyBatch with all .CEL files from datadir (There are actual .CEL files this time!)
eset <- rma(ab)
# converts AffyBatch data to expression set, normalizes data
ID <- featureNames(eset)
# Sets ID to be the names stored in eset
#################################################
Symbol <- getSYMBOL(ID,"hgu95av2.db")
# Sets Symbol to map the identifiers from the eset to hgu95av2.db
fData(eset) <- data.frame(Symbol=Symbol)
#Accesses the data in Symbol
#DOESN'T WORK: hgu95av2.db will not load because AnnotationDbi is outdated
################################################
treatments <- factor(c(1,1,2,2,3,3,4,4),labels=c("e10","E10","e48","E48"))
# Gathers data from eset, labels based on time. Will print the vector for data and the 4 levels present - e10 E10 e48 E48
contrasts(treatments) <- cbind(Time=c(0,0,1,1),E10=c(0,1,0,0),E48=c(0,0,0,1))
# Sets, contrasts for the factor, "treatments". E10 and E48 show FC in the Time
design <- model.matrix(~treatments)
# Sets design to be a matrix based on the factor "treatments"
fit <- lmFit(eset,design)
# creates linear model of matrix "design" based on exression set "eset"
cont.matrix <- cbind(E10=c(0,0,1,0),E48=c(0,0,0,1))
# isolates the estrogen effects
fit2 <- contrasts.fit(fit, cont.matrix)
# fills linear model "fit" with standard errors for contrast matrix
fit2 <- eBayes(fit2)
results <- decideTests(fit2, method="global")
#classifies statistics in fit2 using global method which controls false discovery rate
results <- decideTests(fit2, method="nestedF")
#adjusts F-test p-values
i <- grep("AFFX",ID)
#finds pattern matches, but what is AFFX???
summary(fit2$F.p.value[i])
#Provides summary of data found in F.p.value based on pattern-recognition
results <- classifyTestsF(fit2, p.value=0.0001)
#Tests each gene across the contrasts, with a cutoff p.value
summary(results)
table(E10=results[,1],E48=results[,2])
#Creates a table with E10 being the first column of results and E48 being the second
vennDiagram(results,include="up")
#Creates venn diagram showing up-regulated genes, matches UserGuide
vennDiagram(results,include="down")
#Creates venn diagram showing down-regulated genes, matches UserGuide
ID
i
i <- grep("AFFX",ID,value+TRUE)
i <- grep("AFFX",ID,value=TRUE)
i
ID
i
### Installed "hgu95av2cdf" package using biocLite function
### Installed "hgu95av2.db" package using biocLite function
### Installed "estrogen" package using biocLite function
library(limma)
library(affy)
library(annotate)
library(hgu95av2.db)
#Error: package ‘AnnotationDbi’ 1.22.6 is loaded, but >= 1.23.24 is required by ‘hgu95av2.db’
library(hgu95av2cdf)
# Warning message: package ‘hgu95av2cdf’ was built under R version 3.0.2
datadir <- file.path(find.package("estrogen"),"extdata")
# finds the data from estrogen package
dir(datadir)
# lists all files in datadir
targets <- readTargets("phenoData.txt",path=datadir,sep="",row.names="filename")
# sets the variable "targets" to be a dataframe of the microarray data in phenoData.txt
targets
# shows variable "targets", matches UserGuide
ab <- ReadAffy(filenames=targets$filename, celfile.path=datadir)
# Creates variable "ab" as an AffyBatch with all .CEL files from datadir (There are actual .CEL files this time!)
eset <- rma(ab)
# converts AffyBatch data to expression set, normalizes data
ID <- featureNames(eset)
# Sets ID to be the names stored in eset
#################################################
Symbol <- getSYMBOL(ID,"hgu95av2.db")
# Sets Symbol to map the identifiers from the eset to hgu95av2.db
fData(eset) <- data.frame(Symbol=Symbol)
#Accesses the data in Symbol
#DOESN'T WORK: hgu95av2.db will not load because AnnotationDbi is outdated
################################################
treatments <- factor(c(1,1,2,2,3,3,4,4),labels=c("e10","E10","e48","E48"))
# Gathers data from eset, labels based on time. Will print the vector for data and the 4 levels present - e10 E10 e48 E48
contrasts(treatments) <- cbind(Time=c(0,0,1,1),E10=c(0,1,0,0),E48=c(0,0,0,1))
# Sets, contrasts for the factor, "treatments". E10 and E48 show FC in the Time
design <- model.matrix(~treatments)
# Sets design to be a matrix based on the factor "treatments"
fit <- lmFit(eset,design)
# creates linear model of matrix "design" based on exression set "eset"
cont.matrix <- cbind(E10=c(0,0,1,0),E48=c(0,0,0,1))
# isolates the estrogen effects
fit2 <- contrasts.fit(fit, cont.matrix)
# fills linear model "fit" with standard errors for contrast matrix
fit2 <- eBayes(fit2)
results <- decideTests(fit2, method="global")
#classifies statistics in fit2 using global method which controls false discovery rate
results <- decideTests(fit2, method="nestedF")
#adjusts F-test p-values
i <- grep("AFFX",ID)
#finds pattern matches, but what is AFFX???
summary(fit2$F.p.value[i])
#Provides summary of data found in F.p.value based on pattern-recognition
results <- classifyTestsF(fit2, p.value=0.0001)
#Tests each gene across the contrasts, with a cutoff p.value
summary(results)
table(E10=results[,1],E48=results[,2])
#Creates a table with E10 being the first column of results and E48 being the second
vennDiagram(results,include="up")
#Creates venn diagram showing up-regulated genes, matches UserGuide
vennDiagram(results,include="down")
#Creates venn diagram showing down-regulated genes, matches UserGuide
library(limma)
library(affy)
library(annotate)
library(hgu95av2.db)
library(limma)
library(affy)
library(annotate)
library(hgu95av2.db)
### Installed "hgu95av2cdf" package using biocLite function
### Installed "hgu95av2.db" package using biocLite function
### Installed "estrogen" package using biocLite function
library(limma)
library(affy)
library(annotate)
library(hgu95av2.db)
#Error: package ‘AnnotationDbi’ 1.22.6 is loaded, but >= 1.23.24 is required by ‘hgu95av2.db’
library(hgu95av2cdf)
# Warning message: package ‘hgu95av2cdf’ was built under R version 3.0.2
datadir <- file.path(find.package("estrogen"),"extdata")
# finds the data from estrogen package
dir(datadir)
# lists all files in datadir
targets <- readTargets("phenoData.txt",path=datadir,sep="",row.names="filename")
# sets the variable "targets" to be a dataframe of the microarray data in phenoData.txt
targets
# shows variable "targets", matches UserGuide
ab <- ReadAffy(filenames=targets$filename, celfile.path=datadir)
# Creates variable "ab" as an AffyBatch with all .CEL files from datadir (There are actual .CEL files this time!)
eset <- rma(ab)
# converts AffyBatch data to expression set, normalizes data
ID <- featureNames(eset)
# Sets ID to be the names stored in eset
#################################################
Symbol <- getSYMBOL(ID,"hgu95av2.db")
# Sets Symbol to map the identifiers from the eset to hgu95av2.db
fData(eset) <- data.frame(Symbol=Symbol)
#Accesses the data in Symbol
#DOESN'T WORK: hgu95av2.db will not load because AnnotationDbi is outdated
fData
Symbol
?kernlab
library(kernlab)
?kernlab
load("./BRCA/RNASeq/processed_RNA.rda")
setwd("/Volumes/MacintoshHD3/data/TCGA_Assembler/Data/")
diseases <- list.files(recursive=F)
load("./BRCA/RNASeq/processed_RNA.rda")
RNASeq <- Data
rownames(RNASeq) <- Des[,1]
genes <- Des[,1]!="?"
noQ <- Des[genes,1]
dup_genes <- duplicated(noQ) | duplicated(noQ, fromLast = TRUE)
aggNames <- noQ[dup_genes]
aggInput <- (RNASeq)[aggNames,]
RNASeqAgg <- aggregate(aggInput, by = list(aggNames), FUN = "mean")
rownames(RNASeqAgg) <- RNASeqAgg[,"Group.1"]
aggRNA <- RNASeqAgg[,-1]
dim(aggRNA)
RNAnoQ <- RNASeq[noQ,]
noQnoDup <- RNAnoQ[!dup_genes,]
dim(noQnoDup)
FullSet <- rbind(noQnoDup, aggRNA)
dim(FullSet)
dim(RNASeq)
voomOutput <- voom(FullSet, design=NULL, plot=T)
library(edgeR)
library(Rsubread)
library(matrixStats)
voomOutput <- voom(FullSet, design=NULL, plot=T)
exprs_log2 <- voomOutput$E
head(exprs_log2)
dim(exprs_log2)
paste(".", x, "RNASeq", zScore.RData, sep="/")
y <- paste(".", "x", "RNASeq", zScore.RData, sep="/")
y <- paste(".", "x", "RNASeq", "zScore.RData", sep="/")
y
setwd("/Volumes/MacintoshHD3/data/TCGA_Assembler/Data/")
diseases <- list.files(recursive=F)
library(edgeR)
library(Rsubread)
library(matrixStats)
setwd("/Volumes/MacintoshHD3/data/TCGA_Assembler/Data/")
diseases <- list.files(recursive=F)
for(x in diseases){
load(paste(".", x, "RNASeq/processed_RNA.rda", sep = "/"))
RNASeq <- Data
rownames(RNASeq) <- Des[,1]
genes <- Des[,1]!="?"
noQ <- Des[genes,1]
dup_genes <- duplicated(noQ) | duplicated(noQ, fromLast = TRUE)
aggNames <- noQ[dup_genes]
aggInput <- (RNASeq)[aggNames,]
RNASeqAgg <- aggregate(aggInput, by = list(aggNames), FUN = "mean")
rownames(RNASeqAgg) <- RNASeqAgg[,"Group.1"]
aggRNA <- RNASeqAgg[,-1]
RNAnoQ <- RNASeq[noQ,]
noQnoDup <- RNAnoQ[!dup_genes,]
FullSet <- rbind(noQnoDup, aggRNA)
voomOutput <- voom(FullSet, design=NULL, plot=T)
exprs_log2 <- voomOutput$E
exprs_zScore <- (exprs_log2-(rowMeans(exprs_log2)))/rowSds(exprs_meansCentered)
rm(Data, Des)
save(exprs_zScore, file = paste(".", x, "RNASeq", "zScore.RData", sep="/"))
}
?rowSds
?meansCenters
?meansCentered
head(exprs_log2)
head(voomOutput)
voomOutput
voomOutput$E
head(voomOutput$E)
exprs_zScore <- (exprs_log2-(rowMeans(exprs_log2)))/rowSds(exprs_meansCentered)
head(exprs_log2)
head(RNAnoQ)
head(exprs_log2)
table(table(rownames(RNASeq)))
str(table(table(rownames(RNASeq))))
table(table(noQ))
str(table(table(noQ)))
as.matrix(table(table(noQ)))
dim(as.matrix(table(table(noQ))))
head(aggNames)
head(aggInput)
rownames(aggInput)
table(table(rownmaes(FullSet)))
table(table(rownames(FullSet)))
exprs_zScore <- (exprs_log2-(rowMeans(exprs_log2)))/rowSds(exprs_log2)
head(exprs_zScore)
?voom
table(is.na(exprs_log2))
library(edgeR)
library(Rsubread)
library(matrixStats)
setwd("/Volumes/MacintoshHD3/data/TCGA_Assembler/Data/")
diseases <- list.files(recursive=F)
for(x in diseases){
load(paste(".", x, "RNASeq/processed_RNA.rda", sep = "/"))
RNASeq <- Data
rownames(RNASeq) <- Des[,1]
genes <- Des[,1]!="?"
noQ <- Des[genes,1]
if(dim(as.matrix(table(table(noQ))))[1]==2){
dup_genes <- duplicated(noQ) | duplicated(noQ, fromLast = TRUE)
aggNames <- noQ[dup_genes]
aggInput <- (RNASeq)[aggNames,]
RNASeqAgg <- aggregate(aggInput, by = list(aggNames), FUN = "mean")
rownames(RNASeqAgg) <- RNASeqAgg[,"Group.1"]
aggRNA <- RNASeqAgg[,-1]
RNAnoQ <- RNASeq[noQ,]
noQnoDup <- RNAnoQ[!dup_genes,]
FullSet <- rbind(noQnoDup, aggRNA)
voomOutput <- voom(FullSet, design=NULL, plot=T)
exprs_log2 <- voomOutput$E
exprs_zScore <- (exprs_log2-(rowMeans(exprs_log2)))/rowSds(exprs_log2)
rm(Data, Des)
save(exprs_zScore, file = paste(".", x, "RNASeq", "zScore.RData", sep="/"))
}else{
writeLines(paste(x,"has a weird duplicate things we need to look at
We need to write a special exception"))
}
}
library(edgeR)
library(Rsubread)
library(matrixStats)
setwd("/Volumes/MacintoshHD3/data/TCGA_Assembler/Data/")
diseases <- "THCA"
for(x in diseases){
load(paste(".", x, "RNASeq/processed_RNA.rda", sep = "/"))
RNASeq <- Data
rownames(RNASeq) <- Des[,1]
genes <- Des[,1]!="?"
noQ <- Des[genes,1]
if(dim(as.matrix(table(table(noQ))))[1]==2){
dup_genes <- duplicated(noQ) | duplicated(noQ, fromLast = TRUE)
aggNames <- noQ[dup_genes]
aggInput <- (RNASeq)[aggNames,]
RNASeqAgg <- aggregate(aggInput, by = list(aggNames), FUN = "mean")
rownames(RNASeqAgg) <- RNASeqAgg[,"Group.1"]
aggRNA <- RNASeqAgg[,-1]
RNAnoQ <- RNASeq[noQ,]
noQnoDup <- RNAnoQ[!dup_genes,]
FullSet <- rbind(noQnoDup, aggRNA)
voomOutput <- voom(FullSet, design=NULL, plot=T)
exprs_log2 <- voomOutput$E
exprs_zScore <- (exprs_log2-(rowMeans(exprs_log2)))/rowSds(exprs_log2)
rm(Data, Des)
save(exprs_zScore, file = paste(".", x, "RNASeq", "zScore.RData", sep="/"))
}else{
writeLines(paste(x,"has a weird duplicate things we need to look at
We need to write a special exception"))
}
}
setwd("/Volumes/MacintoshHD3/data/TCGA_Assembler/Data/")
diseases <- list.files(recursive=F)
for(x in diseases){
load(paste(".", x, "RNASeq", "zScore.RData", sep="/"))
exprs <- exprs_zScore
}
diseases
diseases <- list.files(recursive=F)[-"STAD"]
?delim
?delin
?read.delim
setwd("/Volumes/MacintoshHD3/data/TCGA_Assembler/Scripts")
read.delim("./Human Gene Modules/TableS2B.xlsx")
library(ROBDC)
library(ROC)
library(RODBC)
read.delim("./Human Gene Modules/TableS2B.xlsx", sep = "/t")
read.delim("./Human Gene Modules/TableS2B.xlsx", sep = "\t")
read.delim("./Human Gene Modules/TableS2B.xlsx", sep = "\t", row.names = NULL)
library(gdata)
?read.xls
library(gdata)
setwd("/Volumes/MacintoshHD3/data/TCGA_Assembler/Scripts")
read.xls("./Human Gene Modules/TableS2B.xlsx", sheet = "Table S2B")
read.xls("./Human Gene Modules/TableS2B.xlsx", sheet = "Table S2B", blank.lines.skip = T)
read.xls("./Human Gene Modules/TableS2B.xlsx", sheet="Table S2B", method=T blank.lines.skip=T)
read.xls("./Human Gene Modules/TableS2B.xlsx", sheet="Table S2B", method=T, blank.lines.skip=T)
read.xls("./Human Gene Modules/TableS2B.xlsx", sheet="Table S2B", method="csv", blank.lines.skip=T)
roughGenes <- read.xls("./Human Gene Modules/TableS2B.xlsx", sheet="Table S2B", method="csv", blank.lines.skip=T)
roughGenes <- read.xls("./Human Gene Modules/TableS2B.xlsx", sheet="Table S2B", verbose=F method="csv", blank.lines.skip=T)
roughGenes <- read.xls("./Human Gene Modules/TableS2B.xlsx", sheet="Table S2B", verbose=F, method="csv", blank.lines.skip=T)
dim(roughGenes)
roughGenes[,1]
justMods <- roughGenes[,-1]
dim(justMods)
colnames(justMods)
justMods[,2]
head(roughGenes)
justMods <- roughGenes[-c(1,2),-1]
head(justMods)
?apply
apply(justMods, MARGIN=2, FUN=list)
Mods <- lapply(modSep, unique)
modSep <- apply(justMods, MARGIN=2, FUN=list)
Mods <- lapply(modSep, unique)
mods
Mods
head(Mods)
Mods <- lapply(modSep, function(x){
unique(x[[1]])})
Mods
mods <- lapply(modSep, function(x){
unique(x[[1]])})
names(mods)
names(mods) <- c(paste("Module", 1:49, sep="."))
names(mods)
names(mods) <- c(paste("Module", 1:49, sep="_"))
names(mods)
noBlank <- lapply(mods, function(x){
x[x!=""]}
)
noBlank
save(noBlank, file = paste("./Human Gene Modules/ModuleLists")
)
save(noBlank, file = paste("./Human Gene Modules/.RData"))
save(noBlank, file = paste("./Human Gene Modules/ModuleLists.RData"))
